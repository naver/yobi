# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /navitest                                       controllers.Application.navi()

# Home page
GET     /                                               controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                   controllers.Assets.at(path="/public", file)
GET     /messages.js                                    controllers.Application.jsMessages()
GET     /favicon.ico                                    controllers.Assets.at(path="/public", file="images/favicon.ico")

# Bootstrapping for test
GET     /init                                           controllers.Application.init()
GET		/UIKit											controllers.Application.UIKit()

# User
GET     /users                                          controllers.UserApp.users(query: String ?= "")
GET     /users/loginform                                controllers.UserApp.loginForm()
POST    /users/login                                    controllers.UserApp.login()
GET     /users/logout                                   controllers.UserApp.logout()
GET     /users/signupform                               controllers.UserApp.signupForm()
POST    /users/signup                                   controllers.UserApp.newUser()
GET     /user/editform                                  controllers.UserApp.editUserInfoForm()
POST    /user/edit                                      controllers.UserApp.editUserInfo()
POST	/user/resetPassword								controllers.UserApp.resetUserPassword()
GET     /user/isExist/:loginId                          controllers.UserApp.isUserExist(loginId)
GET     /user/isEmailExist/:email                       controllers.UserApp.isEmailExist(email)

GET 	/info/leave/:user/:project  				    controllers.UserApp.leave(user, project)

# Site
GET     /sites/mail                                     controllers.SiteApp.writeMail(errorMessage:String ?= "", sended:Boolean ?= false)
POST    /sites/mail                                     controllers.SiteApp.sendMail()
GET     /sites/massmail                                 controllers.SiteApp.massMail()
POST    /sites/mailList                                 controllers.SiteApp.mailList()
GET     /sites/userList                                 controllers.SiteApp.userList(pageNum: Int ?= 0, loginId: String ?= null)
GET     /sites/user/delete                              controllers.SiteApp.deleteUser(userId: Long)
GET     /sites/projectList                              controllers.SiteApp.projectList(filter:String ?= "", pageNum: Int ?=0)
GET     /sites/project/delete/:projectId                controllers.SiteApp.deleteProject(projectId:Long)
GET     /sites/toggleAccountLock/:loginId               controllers.SiteApp.toggleAccountLock(loginId: String)
GET     /lostPassword                                   controllers.PasswordResetApp.lostPassword
POST    /lostPassword                                   controllers.PasswordResetApp.requestResetPasswordEmail()
GET     /resetPassword                                  controllers.PasswordResetApp.resetPasswordForm(s:String)
POST    /resetPassword                                  controllers.PasswordResetApp.resetPassword()
GET     /sites/postList                                 controllers.SiteApp.postList(pageNum: Int ?= 1)
GET     /sites/issueList                                controllers.SiteApp.issueList(pageNum: Int ?= 1)


# Attachments
GET     /files                                          controllers.AttachmentApp.getFileList()
POST    /files                                          controllers.AttachmentApp.uploadFile()
GET     /files/:id                                      controllers.AttachmentApp.getFile(id: Long)
GET     /files/:id/?                                    controllers.AttachmentApp.getFile(id: Long)
POST    /files/:id/?                            		controllers.AttachmentApp.deleteFile(id: Long)
POST    /files/:id                            			controllers.AttachmentApp.deleteFile(id: Long)

# Boards
GET     /:user/:project/posts                           controllers.BoardApp.posts(user, project, pageNum: Int ?= 1)
GET     /:user/:project/postform                        controllers.BoardApp.newPostForm(user, project)
POST    /:user/:project/posts                           controllers.BoardApp.newPost(user, project)
GET     /:user/:project/post/:number                        controllers.BoardApp.post(user, project, number:Long)
POST    /:user/:project/post/:number/comment/new            controllers.BoardApp.newComment(user, project, number:Long)
GET     /:user/:project/post/:number/delete                 controllers.BoardApp.deletePost(user, project, number:Long)
GET     /:user/:project/post/:number/editform               controllers.BoardApp.editPostForm(user, project, number:Long)
POST    /:user/:project/post/:number/edit                   controllers.BoardApp.editPost(user, project, number:Long)
GET     /:user/:project/post/:number/comment/:commentId/delete     controllers.BoardApp.deleteComment(user, project, number:Long, commentId:Long)

# Tags
GET    /tags                                            controllers.TagApp.tags(query: String ?= "", context: String ?= "", limit: Integer ?= null)
GET    /:user/:project/tags                             controllers.ProjectApp.tags(user, project)
POST   /:user/:project/tags                             controllers.ProjectApp.tag(user, project)
POST   /:user/:project/tags/:id                         controllers.ProjectApp.untag(user, project, id: Long)

# Projects
GET     /projectform                                    controllers.ProjectApp.newProjectForm()
POST    /projects                                       controllers.ProjectApp.newProject()
GET     /projects                                       controllers.ProjectApp.projects(filter:String ?= "", state: String ?= "all", pageNum: Int ?= 1)
GET     /:user/:project                                 controllers.ProjectApp.project(user, project)
GET     /:user/:project/settingform                     controllers.ProjectApp.settingForm(user, project)
POST    /:user/:project/setting                         controllers.ProjectApp.settingProject(user, project)
GET     /:user/:project/deleteform                      controllers.ProjectApp.deleteForm(user, project)
GET     /:user/:project/delete                          controllers.ProjectApp.deleteProject(user, project)
GET     /:user/:project/members                         controllers.ProjectApp.members(user, project)
POST    /:user/:project/members                         controllers.ProjectApp.newMember(user, project)
POST    /:user/:project/member/:id/edit                 controllers.ProjectApp.editMember(user, project, id:Long)
GET     /:user/:project/member/:id/delete               controllers.ProjectApp.deleteMember(user, project, id:Long)

# Milestones
GET     /:user/:project/milestones                      controllers.MilestoneApp.milestones(user, project)
#GET    /:user/:project/milestones/manage               controllers.MilestoneApp.manageMilestones(user, project)
GET     /:user/:project/newMilestoneForm                controllers.MilestoneApp.newMilestoneForm(user, project)
POST    /:user/:project/milestones                      controllers.MilestoneApp.newMilestone(user, project)
GET     /:user/:project/milestone/:id/editform          controllers.MilestoneApp.editMilestoneForm(user, project, id: Long)
POST    /:user/:project/milestone/:id/edit              controllers.MilestoneApp.editMilestone(user, project, id: Long)
GET     /:user/:project/milestone/:id/delete            controllers.MilestoneApp.deleteMilestone(user, project, id: Long)
GET     /:user/:project/milestone/:id                   controllers.MilestoneApp.milestone(user, project, id: Long)

# Issues
GET     /:user/:project/issues                          controllers.IssueApp.issues(user, project, state:String ?= "", format:String ?= "html", pageNum: Int ?= 1)
GET     /:user/:project/issueform                       controllers.IssueApp.newIssueForm(user, project)
POST    /:user/:project/issues                          controllers.IssueApp.massUpdate(user, project)
POST    /:user/:project/issues/latest                   controllers.IssueApp.newIssue(user, project)
GET     /:user/:project/issue/:number                       controllers.IssueApp.issue(user, project, number:Long)
GET     /:user/:project/issue/:number/editform              controllers.IssueApp.editIssueForm(user, project, number:Long)
POST    /:user/:project/issue/:number/edit                  controllers.IssueApp.editIssue(user, project, number:Long)
GET     /:user/:project/issue/:number/delete                controllers.IssueApp.deleteIssue(user, project, number:Long)
POST    /:user/:project/issue/:number/comments              controllers.IssueApp.newComment(user, project, number:Long)
GET     /:user/:project/issue/:number/comment/:commentId/delete         controllers.IssueApp.deleteComment(user, project, number:Long, commentId:Long)

# Label
GET     /:user/:project/labels                          controllers.IssueLabelApp.labels(user, project)
POST	/:user/:project/labels					        controllers.IssueLabelApp.newLabel(user, project)
POST	/:user/:project/label/:id/delete 	            controllers.IssueLabelApp.delete(user, project, id:Long)

# Git
GET     /:ownerName/:project/info/refs                  controllers.GitApp.advertise(ownerName:String, project:String, service:String ?= null)
POST    /:ownerName/:project/$service<git-upload-pack|git-receive-pack>       controllers.GitApp.serviceRpc(ownerName:String, project:String, service:String)

# Fork & Pull Request
GET     /:ownerName/:project/fork                       controllers.PullRequestApp.fork(ownerName:String, project:String)
GET     /:ownerName/:project/pullRequests               controllers.PullRequestApp.pullRequests(ownerName, project)
GET     /:ownerName/:project/closedPullRequests         controllers.PullRequestApp.closedPullRequests(ownerName, project)
GET     /:ownerName/:project/sentPullRequests           controllers.PullRequestApp.sentPullRequests(ownerName, project)
GET     /:ownerName/:project/rejectedPullRequests       controllers.PullRequestApp.rejectedPullRequests(ownerName, project)
GET     /:ownerName/:project/pullRequest/:id            controllers.PullRequestApp.pullRequest(ownerName, project, id: Long)
GET     /:ownerName/:project/pullRequest/:id/commits    controllers.PullRequestApp.pullRequestCommits(ownerName, project, id: Long)
GET     /:ownerName/:project/newPullRequestForm         controllers.PullRequestApp.newPullRequestForm(ownerName:String, project:String)
POST    /:ownerName/:project/pullRequests               controllers.PullRequestApp.newPullRequest(ownerName, project)
GET     /:ownerName/:project/pullRequest/:id/accept     controllers.PullRequestApp.accept(ownerName, project, id: Long)
GET     /:ownerName/:project/pullRequest/:id/reject     controllers.PullRequestApp.reject(ownerName, project, id: Long)
GET     /:ownerName/:project/pullRequest/:id/cancel     controllers.PullRequestApp.cancel(ownerName, project, id: Long)

# SVN
HEAD    /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
GET     /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
POST    /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
OPTIONS /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
DELETE  /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
PUT     /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
POST    /!svn-fake/sevice/                              controllers.SvnApp.service()

# Code
#for AJAX
GET     /:user/:project/code/!                          controllers.CodeApp.ajaxRequest(user, project, path = "")
GET     /:user/:project/code/!/                         controllers.CodeApp.ajaxRequest(user, project, path = "")
GET     /:user/:project/code/!/*path                    controllers.CodeApp.ajaxRequest(user, project, path:String)
GET     /:user/:project/code/:branch/!                  controllers.CodeApp.ajaxRequestWithBranch(user, project, branch:String, path="")
GET     /:user/:project/code/:branch/!/                 controllers.CodeApp.ajaxRequestWithBranch(user, project, branch:String, path="")
GET     /:user/:project/code/:branch/!/*path            controllers.CodeApp.ajaxRequestWithBranch(user, project, branch:String, path:String)
#for normal
GET     /:user/:project/code                            controllers.CodeApp.codeBrowser(user, project)
GET     /:user/:project/rawcode/*path                   controllers.CodeApp.showRawFile(user, project, path:String)
GET     /:user/:project/image/*path                    controllers.CodeApp.showImageFile(user, project, path:String)
GET     /:user/:project/code/:branch                    controllers.CodeApp.codeBrowserWithBranch(user, project, branch:String)

# Commits
GET     /:user/:project/commits                         controllers.CodeHistoryApp.historyUntilHead(user, project)
GET     /:user/:project/commits/:branch                 controllers.CodeHistoryApp.history(user, project, branch:String)
GET     /:user/:project/commit/:id                      controllers.CodeHistoryApp.show(user, project, id:String)

# Search
GET     /:user/:project/search                          controllers.SearchApp.contentsSearch(user, project, page: Int ?= 0)

# Help
GET     /help                                           controllers.HelpApp.help()

# Statistics
GET     /:user/:project/statistics                      controllers.StatisticsApp.statistics(user, project)
GET     /:user                                          controllers.UserApp.userInfo(user)
